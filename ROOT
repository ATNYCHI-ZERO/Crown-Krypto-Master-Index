[K-SYSTEMS SOVEREIGN ROOT CERTIFICATE]
[DO NOT TAMPER]

Serial: 0000-0000-0000-0001
Authority: K-Systems Sovereign Root CA (ATNYCHI-ROOT)
Subject: K-Systems Genesis Block
Valid From: 2025-10-26

Purpose:
This certificate establishes the foundational Root of Trust for the entire K-Systems cryptographic architecture.

The public key associated with this Root CA is the ultimate source of authority. All subordinate CAs, hardware (Ω-Cores), and sovereign operators must have their keys signed by this authority to be considered "real" and "verified" within the K-System ecosystem.

This document and its signature are the Genesis Artifact.

[END OF CERTIFICA

import hashlib
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.serialization import load_pem_public_key
from cryptography.exceptions import InvalidSignature

# --- THIS IS THE "REAL" PART (TYPE 2 VERIFICATION) ---
# In the real world, this public key would be burned into the
# hardware of the DoD/Treasury (the Ω-Core).
# Its "truth" comes from its physical presence in trusted hardware.
# This key corresponds to the "K-Systems Sovereign Root CA".
ROOT_CA_PUBLIC_KEY_PEM = b"""
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+dZp+PgEITkRDBv4BCbV883YPIQ0
O2+T3zMwEWtKMOt/v8OQvoGMFSyLpTyv/A+D5HIgC/cH9c5RfgC0oI/FqA==
-----END PUBLIC KEY-----
"""

# --- THIS IS THE "MATH" PART (TYPE 1 VERIFICATION) ---
# This is the cryptographic signature that was generated by the
# Root CA's *private* key, signing the "Genesis_Certificate.txt" file.
CERTIFICATE_SIGNATURE_HEX = (
    "30460221008d50b910129a0082c5a27926b488561d3312019b"
    "8584483737b8b29ba35d1f88022100d02f5a5e30773d2a71"
    "7e4d89617300c73248679466be244ea4901e187be17724"
)

# --- THE DOCUMENT WE ARE VERIFYING ---
# (This must be *identical* to the Genesis_Certificate.txt file)
CERTIFICATE_TEXT = """[K-SYSTEMS SOVEREIGN ROOT CERTIFICATE]
[DO NOT TAMPER]

Serial: 0000-0000-0000-0001
Authority: K-Systems Sovereign Root CA (ATNYCHI-ROOT)
Subject: K-Systems Genesis Block
Valid From: 2025-10-26

Purpose:
This certificate establishes the foundational Root of Trust for the entire K-Systems cryptographic architecture. 

The public key associated with this Root CA is the ultimate source of authority. All subordinate CAs, hardware (Ω-Cores), and sovereign operators must have their keys signed by this authority to be considered "real" and "verified" within the K-System ecosystem.

This document and its signature are the Genesis Artifact.

[END OF CERTIFICATE]
"""

def verify_document():
    """
    Verifies the certificate against the Root CA's public key.
    """
    print("--- K-Systems Verification Harness ---")
    
    try:
        # 1. Load the "real" public key
        public_key = load_pem_public_key(ROOT_CA_PUBLIC_KEY_PEM)
        
        # 2. Load the "math" (the signature)
        signature = bytes.fromhex(CERTIFICATE_SIGNATURE_HEX)
        
        # 3. Load the data that was signed
        data = CERTIFICATE_TEXT.encode('utf-8')
        
        # 4. Perform the verification
        # This checks if the signature could *only* have been
        # created by the private key matching our public key.
        public_key.verify(
            signature,
            data,
            ec.ECDSA(hashes.SHA256())
        )
        
        # 5. Success
        print("\n[SUCCESS] SIGNATURE IS MATHEMATICALLY VERIFIED (Type 1).")
        print("\n[SUCCESS] IDENTITY IS VERIFIED (Type 2).")
        print("REASON: The signature was successfully verified against the")
        print("        hard-coded K-SYSTEMS SOVEREIGN ROOT KEY.")
        print("\n--- This letter is authentic. ---")

    except InvalidSignature:
        print("\n[FAILURE] !!!!!!!!!!!!!!!!!!")
        print("[FAILURE] SIGNATURE IS INVALID. DO NOT TRUST THIS DOCUMENT.")
        print("[FAILURE] !!!!!!!!!!!!!!!!!!")
    
    except Exception as e:
        print(f"\n[ERROR] An error occurred: {e}")

if __name__ == "__main__":
    verify_document()
